<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dart on Arian's blog</title><link>http://arian-d.github.io/blog/tags/dart/</link><description>Recent content in Dart on Arian's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 22 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://arian-d.github.io/blog/tags/dart/index.xml" rel="self" type="application/rss+xml"/><item><title>My Favorite Little Operator</title><link>http://arian-d.github.io/blog/posts/my-favorite-little-operator/</link><pubDate>Wed, 22 May 2024 00:00:00 +0000</pubDate><guid>http://arian-d.github.io/blog/posts/my-favorite-little-operator/</guid><description>&lt;p&gt;Sometimes, there are little things that solve so much that we take for
granted. There&amp;rsquo;s also things that solve so much that aren&amp;rsquo;t used as
often.&lt;/p&gt;
&lt;p&gt;Recently, I&amp;rsquo;ve been relying on &lt;a href="https://en.wikipedia.org/wiki/Null_coalescing_operator"&gt;??&lt;/a&gt;, which is a very
interesting operator called &amp;ldquo;null-coalescing operator&amp;rdquo;. A fairly
seasoned programmer probably uses it very often and wouldn&amp;rsquo;t find this
as fascinating as I did, but for me, it&amp;rsquo;s a game-changer.&lt;/p&gt;
&lt;p&gt;Take this for instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;somevar&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;somevar&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;non-null value&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;} &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;somevar&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, we print out &lt;code&gt;somevar&lt;/code&gt;, and if it&amp;rsquo;s null, we print a string. You
can also use a ternary operator to clean it up and rewrite it like
this.&lt;/p&gt;</description></item></channel></rss>